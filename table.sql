CREATE TABLE roles (
    role_id SERIAL PRIMARY KEY,
    -- For modern PostgreSQL, you might prefer: role_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name VARCHAR(100) NOT NULL UNIQUE,
    role_code VARCHAR(50) NOT NULL UNIQUE, -- A machine-friendly code, e.g., 'ADMIN', 'EDITOR'
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example:
-- INSERT INTO roles (role_name, role_code, description) VALUES ('Administrator', 'ADMIN', 'Full access to all system features.');
-- INSERT INTO roles (role_name, role_code, description) VALUES ('Editor', 'EDITOR', 'Can edit content but not system settings.');


CREATE TABLE permission_groups (
    permission_group_id SERIAL PRIMARY KEY,
    group_code VARCHAR(100) NOT NULL UNIQUE, -- e.g., 'pages', 'projects' (from JSON "code")
    group_name VARCHAR(255) NOT NULL,        -- e.g., 'Pages', 'Projects' (from JSON "name")
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example based on your JSON:
-- INSERT INTO permission_groups (group_code, group_name) VALUES ('pages', 'Pages');
-- INSERT INTO permission_groups (group_code, group_name) VALUES ('projects', 'Projects');
-- ... and so on for 'suppliers', 'analytics', etc.


CREATE TABLE permission_items (
    permission_item_id SERIAL PRIMARY KEY,
    permission_group_id INT NOT NULL,
    item_code VARCHAR(100) NOT NULL,  -- e.g., 'projects' (under 'pages'), 'add' (under 'projects') (from JSON "access[].code")
    item_label VARCHAR(255) NOT NULL, -- e.g., 'Projects', 'Add' (from JSON "access[].label")
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_permission_group
        FOREIGN KEY(permission_group_id)
        REFERENCES permission_groups(permission_group_id)
        ON DELETE CASCADE, -- If a group is deleted, its items are also deleted.

    UNIQUE (permission_group_id, item_code) -- item_code must be unique within its parent group
);

-- Example based on your JSON:
-- Assuming 'pages' group has permission_group_id = 1:
-- INSERT INTO permission_items (permission_group_id, item_code, item_label) VALUES (1, 'projects', 'Projects');
-- INSERT INTO permission_items (permission_group_id, item_code, item_label) VALUES (1, 'panels', 'Panels');

-- Assuming 'projects' group has permission_group_id = 2:
-- INSERT INTO permission_items (permission_group_id, item_code, item_label) VALUES (2, 'add', 'Add');
-- INSERT INTO permission_items (permission_group_id, item_code, item_label) VALUES (2, 'view', 'View');


CREATE TABLE role_ui_permissions (
    role_ui_permission_id SERIAL PRIMARY KEY,
    role_id INT NOT NULL,
    permission_item_id INT NOT NULL,
    has_access BOOLEAN NOT NULL DEFAULT FALSE, -- This is the "status" from your JSON
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_role
        FOREIGN KEY(role_id)
        REFERENCES roles(role_id)
        ON DELETE CASCADE, -- If a role is deleted, its permission entries are also deleted.

    CONSTRAINT fk_permission_item
        FOREIGN KEY(permission_item_id)
        REFERENCES permission_items(permission_item_id)
        ON DELETE CASCADE, -- If a permission item is deleted, related role permissions are also deleted.

    UNIQUE (role_id, permission_item_id) -- A role can only have one status for a specific permission item.
);

-- Example based on your JSON for the 'admin' role (assuming admin_role_id = 1):
-- If permission_item for ('pages' group -> 'projects' item) has permission_item_id = 101
-- and the JSON status is true:
-- INSERT INTO role_ui_permissions (role_id, permission_item_id, has_access) VALUES (1, 101, TRUE);

-- If permission_item for ('suppliers' group -> 'delete' item) has permission_item_id = 205
-- and the JSON status is false:
-- INSERT INTO role_ui_permissions (role_id, permission_item_id, has_access) VALUES (1, 205, FALSE);